/*
 * File:    Parcel_SLR_Response.cga
 * Created: 11 Oct 2014 18:18:06 GMT
 * Author:  David J. Wasserman
 *
	Copyright 2016 David Joseph Wasserman & Geodesign Technologies
	
	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

version "2014.1"
######################
#Rule Imports
import LU_SLR : "LU_Flood_Functions_Lib.cga"
import Tree : "/ESRI.lib/rules/Plants/Plant_Loader.cga" # Taken from ESRI.lib and uses its assets. Keep this in mind when using rule. 
#import OSM : "/ESRI.lib/rules/Buildings/Building_From_OpenStreetMap.cga"
######################
#Asset/Texture Paths
const Base_Folder = "FloodReponseTextures"
const DirtMap_Folder = Base_Folder + "/DirtMap"
const FlatRoof_Folder = Base_Folder + "/FlatRoof"
const SlopedRoof_Folder = Base_Folder +"/SlopedRoof"
const Vegetation_Folder = Base_Folder + "/Vegetation"
const WallTextures_Folder = Base_Folder + "/WallTextures"
const Grass_Folder = Vegetation_Folder + "/Grass"
const Other_Folder = Base_Folder + "/Other"
######################
#Attribute Declaration
@Group("DISPLAY SETTINGS","Display",1)
@Order(1)@Range("Wall Flood Percent","HAZUS Damage","Usage","Building Type","Peak Runoff/Permeability","Height Limit Exceeded","Colored","Textured")
attr Scenario_Representation ="Wall Flood Percent"
@Order(2)@Range(0,1)
attr Transparency=.33
@Order(3)@Range("whiteToBlack","greenToRed","yellowToRed","redToBlue","orangeToBlue","brownToBlue","spectrum")@Description("Choose the color gradient for the building color scale when representation is set to Wall Surface Floodded.")
attr Flood_Risk_Color_Range ="yellowToRed"
@Order(4)@Color @Description("This is the color chosen for buildings that are not set to flood.")
attr No_Flood_Risk_Color="#22FF22"
@Order(6)@Range("Low","Moderate","High") @Description("When low, windows, doors, and other building elements will be left as blank walls. When high or moderate, windows and walls will be split out and given detailing. High has web scene water and textures.")
attr LOD_Setting="Low"
@Order(7)@Range(-3,3) @Description("Translates the lot shape up or down. Helps for adjusting shape position to match sidewalk height, but can be used to demonstrate grade based adaptation.")
attr Grade_Adjustment=0 #0.102
@Order(8)@Range("true","false") @Description("Turns off display of and reporting for critical systems.")
attr Terminate_Critical_Systems="false"

@Group("DISPLAY SETTINGS","Mapped SLR Scenario Data",3)
@Order(10) @Description("Designed to sample a raster or object attribute that references to the elevation above sea level that the building footprint will sit on.")#Grade? Streets?
attr Grade_Elevation=scope.elevation
@Order(12) @Description("Designed to sample a raster or object attribute that references to the elevation above sea level that flood waters are expected to reach.")
attr Base_Flood_Elevation=0
@Hidden @Order(13) @Range("Detached","Semi-Attached","Attached")
attr Building_Type="Detached"
@Order(14)@Description("Freeboard is a factor of safety usually expressed in feet above a flood level for purposes of floodplain management.-FEMA This attribute can be mapped, but defaults to 1 foot.")
attr Free_Board_Requirement=.3048
@Order(15)@Description("Represents the market value of the lot that feeds into reporting.")
attr Market_Value= geometry.area()*400*Floor_Count_Abs
#@Order(16)@Description("Imports and activates 3D Text rule.")
#attr Text_On=false

@Group("BUILDING","Land Use/HAZUS",4)
@Order(1) @Range("Vacant Residential","Single Family","Mobile Homes","Multi-family","Condominia","Cooperatives","Retirement Homes","Boarding Homes (Institutional)","Multi-family less than 10 units","Undefined reserved for DOR","Vacant Commercial","Stores One-Story","Mixed Use, i.e., Store and Office","Department Stores","Department Stores","Regional Shopping Malls","Community Shopping Centers","One-Story Non-Professional Offices","Multi-Story Non-Professional Offices","Professional Service Buildings","Airports, Marinas, Bus Terminals, and Piers","Restaurants, cafeterias","Drive-in Restaurants","Financial Institutions","Insurance Company Offices","Repair Service Shops","Service Stations","Automotive Repair, Service, and Sales","Parking Lots, Mobile Home Sales","Wholesale, Manufacturing, and Produce Outlets","Florist, Greenhouses","Drive-in Theaters, Open Stadiums","Enclosed Theaters, Auditoriums","Night Clubs, Bars, and Cocktail Lounges","Bowling Alleys, Skating Rings, Enclosed Arenas","Tourist Attractions","Camps","Race Horse, Auto, and Dog Tracks","Golf Courses","Hotels, Motels","Vacant Industrial","Light Manufacturing","Heavy Manufacturing","Lumber Yards, Sawmills, Planning Mills,","Fruit, Vegetables, and Meat Packing","Canneries, Distilleries, and Wineries","Other Food Processing","Mineral Processing","Warehouses, and Distribution Centers","Industrial Storage (Fuel, Equip, and Material)","Improved Agriculture","Cropland Soil Class 1","Cropland Soil Class 2","Cropland Soil Class 3","Timberland","Timberland","Timberland","Timberland","Timberland","Timberland","Grazing Land Soil Class 1","Grazing Land Soil Class 2","Grazing Land Soil Class 3","Grazing Land Soil Class 4","Grazing Land Soil Class 5","Grazing Land Soil Class 6","Orchard, Groves, Citrus","Poultry, Bees, Tropical Fish, Rabbits, etc.","Dairies, Feed Lots","Ornamentals, Misc. Agriculture","Vacant Institutional","Churches","Private Schools","Private Hospitals","Homes for Aged","Orphanages","Mortuaries, Cemeteries","Clubs, Lodges, and Union Halls","Sanitariums, Convalescent, and Best Homes","Cultural Organizations","Undefined","Military","Forest, Park, and Recreational Areas","Public Schools","Colleges","Public Hospitals","Other Counties","Other State","Other Federal","Other Municipal","Gov. Owned Leased by Non-Gov. Lessee","Utilities","Mining, Petroleum, and Gas Lands","Subsurface Rights","Rights-of-Way Streets, Roads, and Canals","Rivers, Lakes, and Submerged Lands","Sewage Disposal, Borrow Pits, and Wetlands","Outdoor Recreational","Centrally Assessed","Acreage not Zoned for Agricultural") @Description("Disaggregate land use cateogories based on Florida Parcel DORUC Code Description. You can map your data to this schema or alter the rule to fit your land use database")
attr DORUC_Land_Use = case p(.5):"Single Family" case p(.15):"Multi-family" else: "Stores One-Story"
@Order(2) @Range("RES1","RES2","RES3","COM1","COM2","COM3","COM4","COM5","COM6","COM7","COM8","COM9","COM10","IND1","IND2","IND3","IND4","IND5","IND6","EDU1","EDU2","GOV1","GOV2","AGR1") @Description("This mapped zoning attribute alters the default settings for zoning attributes and the usage colors using HAZUS land use classes.")
attr HAZUS_Land_Use_1 = LU_SLR.getValueByDORUC(DORUC_Land_Use,LU_SLR.HAZUS_Land_Use_Class)
@Order(3) @Range("RES1","RES2","RES3","COM1","COM2","COM3","COM4","COM5","COM6","COM7","COM8","COM9","COM10","IND1","IND2","IND3","IND4","IND5","IND6","EDU1","EDU2","GOV1","GOV2","AGR1") @Description("This mapped zoning attribute alters the default settings for zoning attributes and the usage colors using HAZUS land use classes..")
attr HAZUS_Land_Use_2 = HAZUS_Land_Use_1
@Order(4) @Range("Wood","Steel","Concrete","Masonry","Mobile Home") @Description("This mapped attribute links to a HAZUS building type class. Automatic functions will default this type based on the DORUC land use if not provided.")
attr HAZUS_Building_Type = _initialBuildingType(DORUC_Land_Use,.8,.15,.05)
@Order(5) @Range(0,Floor_Count_Abs)@Description("This attribute controls what floors are set to land use 2, while all other floors are land use 1.")
attr Use_2_Floors=0

#@Order(6) @Range("Short Duration","Long Duration") @Description("Duration of the HAZUS Flood Hazard.")
#attr HAZUS_Hazard_Duration = "Long Duration"
#@Order(7) @Range("Fresh Water","Salt Water") @Description("Water Type of the HAZUS Flood Hazard.")
#attr HAZUS_Water_Type = "Salt Water"

@Group("BUILDING","Buildable Volume",5)
@Order(7) @Range("Flat", "Hip", "Gable", "Shed") @Description("Determines the roof types of the chosen building, or can be changed to an envelope that can be altered by a base height/setback angle.")
attr Roof_Type="Flat"
@Order(8) @Range(0,2000)  @Description("This is the starting height of the building. It determines the starting floor count and building height.")
attr Building_Height	= _initialOSMBuildingHeight((DORUC_Land_Use))
@Order(9) @Range(1,100)@Description("Total number of floors in the building. Is used by default to determine heights.")
attr Floor_Count = ceil(Building_Height/Floor_Height)
@Order(10) @Range(1,2000) @Description("Zoning Height Limit of Building. If this is exceeded, a report will be triggered, and it will show as faded red above the building equal to the difference.")
attr Height_Limit = _initialTotalHeight 
@Order(11)@Range(0,5)@Description("Determines the height of the 1st floor of the building.")
attr Ground_Floor_Height = 3.75
@Order(12)@Range(0,5)@Description("Determines the height of all floors other than the first floor.")
attr Floor_Height		= 3.25
@Order(13)@Range(0,10) @Description("Determines the setback of of each floor from the previous floor. Stops at some minimum size.")
attr Building_Setback = 0
@Order(14)@Range("From Street","Front","Back","Right and Left Side","All Sides")@Description("Determines the size of building setback for the building. The setbacks adjust based on the setback type.")
attr Building_Setback_Side="From Street"
@Order(15)@Range(1,20)@Description("This attribute controls the floors on which setbacks start, with the first floor starting at one.")
attr Building_Setback_Floor=2
@Order(16)@Range("Wedding Cake","Alternating","One Setback")@Description("Determines the type of building setback for the building.")
attr Building_Setback_Type="Alternating"
@Order(17) @Range(5,30) @Description("A parameter that determines the threshold for width and length before a building is no longer being setback.")
attr Setback_Size_Threshold =10
@Order(18) @Hidden @Range(0,1000)  @Description("Max_Height of the total building, is by default determined by floor count.")
attr Max_Height			= _initialHeight
@Order(19) @Hidden @Range(0,100)  @Description("Height of the front base of the building before the building angles back with the Envelope function. Changing the front will change the side and rear too.")
attr Front_Baseheight	=_initialBaseHeights
@Order(20)@Hidden @Range(0,100) 	@Description("Hidden: Height of the rear base of the building before the building angles back with the Envelope function. Changing the front will change the side and rear too.")
attr Rear_Baseheight	=Front_Baseheight
@Order(21)@Hidden @Range(0,100)	@Description("Hidden: Height of the side base of the building before the building angles back. Changing the front will change the side and rear too.")
attr Side_Baseheight	=Front_Baseheight
@Order(22)@Range(0,90)@Description("Determines the angle the building ascension inclines after the respective base heights are reached when evelopes are on, but when envelope are off it controls the angle of the roofs.")
attr Roof_Angle = case Roof_Type=="Envelope":90 case Roof_Type=="Shed":2.5 else: 30
@Order(23) @Range(0,10) @Description("Creates underground floors with heights equal to the Floor Height.")
attr Underfloors = 0

@Group("ADAPTATION STRATEGIES","Relocate",6)
@Order(1) @Range("true","false")@Description("Will remove any building from the lot, and replace it with a blank lot whose representation varies based on  the replace with attribute.")
attr Relocate= "false"
@Order(2) @Range("Natural","Parking/Storage","Vacant Lot", "Other")@Description("Replaces the building on the lot with a representation related to the choices available.")#Highest level FDOT Taxonomy? 
attr Replace_With="Natural"

@Group("ADAPTATION STRATEGIES","Elevate",7)
@Order(1) @Range(0,10) @Description("Refers to the elevation the building will be raised if Elevate_Structure is not none. Starts out equal to Flood Design Height (Free Board Requ. + Expected Flood Depth).")#Street Level elevation? Street? Add a Grade_Elevation?
attr Elevation_Height=_Maxof((_DesignFloodHeight-.001)-Grade_Elevation,0)
@Order(2) @Range("None","Solid Raise","Piling") @Description("Determines how the structure is elevated either by a solid concrete raise or pilings supporting the building.")
attr Elevate_Structure="None"
@Order(3) @Range("true","false")@Description("This adaptation strategy is for multistory buildings whose main source of costs and function interruption is damaged HVAC,Electrical, and Mechanical equipment.")
attr Elevate_Critical_Systems="false"
@Order(4) @Range("Above FBR+BFE","On Floor Above FBR+BFE", "Top Floor of Building", "On Roof")@Description("Allocates the critical systems to different heights based on the strategy selection and its relationship to the Design Flood Elevation (DFE).")
attr Critical_System_Allocation="Above FBR+BFE"
@Hidden @Order(5) @Range("true","false")@Description("Fills basement floors with some other use.")
attr Fill_UnderFloors="false"
@Hidden @Order(6) @Range("None","Replace Use", "No use")@Description("Determines the use of basement floors being replaced.")
attr Abandon_Lowest_Floor="None"

@Group("ADAPTATION STRATEGIES","Wet Proof",8)
@Order(1) @Range("true","false")@Description("Wet Proof strategy activation is activated by this attribute.")
attr Wet_Proof = "false"
@Order(2)@Range("Parking/Storage","Commercial","Service","Other")@Description("Flooded floors with wet proofing typically are uses other than residential, this picks that bottom floor allocation.")
attr Wet_Floor_Allocation="Service"


@Group("ADAPTATION STRATEGIES","Dry Proof","Deployable Flood Barriers",7)
@Order(1) @Range("None", "Building") @Description("Building option will create a wall up to the elevation height around the building footprint, and the block will only create a wall around the street front area at the edge of the lot.")
attr Deployable_Flood_Barriers="None"
@Group("ADAPTATION STRATEGIES","Dry Proof","Adaptive Building Penetrations",8)
@Order(2) @Range("None","Flood Shields") @Description("Will thematically represent water proofing membranes and seal penetrations of the buildings windows.")
attr Window_Defenses = "None"
@Order(3) @Range("None","Flood Shields") @Description("Will thematically represent water proofing membranes and seal penetrations of the buildings doors.")#"Elevate Where Possible"
attr Door_Defenses ="None"


#Unused Potential attributes
#attr Backflow_Preventers=false
#@Order(4) @Range("true","false")
#attr Strengthen_Foundation=false

@Group("STREETSCAPE CONNECTIONS","Greenspace",9)
@Order(1) @Range("Grass","Trees & Plantings") @Description("Describes how green spaces is allocated. If Trees & Plantings is selected, trees can appear in sized greenspaces.")
attr Greenspace_Type="Trees & Plantings"
@Order(2) @Range(0,1000) @Description("Area required for planting placement in greenspace. ")
attr Tree_Area_Requirement= 200
@Order(3)@Range(0,100) @Description("Setback plantings are placed away from the building.")
attr Planting_Setback = 2
@Order(4) @Range(0,100) @Description("Number of plantings placed")
attr Planting_Count= max(Lot_Area/500,5)
@Order(5)@Description("Determines the species of the tree/plant selected for Tree 1. Random picks from 5 common tree types and is a good default.")@Range("Random","Alder Buckthorn","Amazon Sword Plant","American Chestnut","American Sycamore","Apricot","Australian Pine","Baldcypress","Balsam Fir","Bamboo","Banana Tree","Basswood","Bay Laurel","Black Locust","Blue Gum Eucalyptus","Boxwood","Cabbage Palm Fern","California Bay","California Incense Cedar","California Palm","California Redwood","California Walnut","Coconut Palm","Common Hawthorn","Common Whitebeam","Conker Tree","Date Palm","Desert Willow","Douglas Fir","European Beech","European Larch","Ficus","Field Elm","Flannelbush","Flowering Dogwood","Giant Sequoia","Hedgehog Agave","Japanese Angelica Tree","Lacy Tree Philodendron","Leyland Cypress","Lily of the Valley","Lodgepole Pine","Mediterranean Buckthorn","Mexican Palmetto","Mountain Mahogany","Northern Red Oak","Norway Maple","Norway Spruce","Orange Tree","Orchid","Oval-leaved Privet","Palm Lily","Palo Verde","Paper Birch","Parlour Palm","Prickly Pear Cactus","Red Alder","Red Hickory","Rhododendron Azaleas","Rose","Ruffle Palm","Saguaro Cactus","Sassafras","Scots Pine","Sea Islands Yucca","Shadbush","Snake Plant","Southern Magnolia","Spanish Broom","Strawberry Tree","Sugar Maple","Sunflower","Sweetgum","Umbrella Acacia","Western Juniper","White Ash","White Oak","White Poplar","White Willow","Witch Hazel","","_____________________________","GENERICS","","Generic Dead Tree","Generic Stump","Generic Unknown","","_____________________________","PROXIES","","Algarrobo","American Elderberry","American Pepper","American Silverberry","Athel Tamarisk","Avocado","Black Tupelo","Buttonbush","Canada Buffaloberry","Chinaberry Tree","Chinese Tallow Tree","Common Hackberry","Common Holly","Common Persimmon","Desert Bitterbrush","European Hornbeam","Giant Chinquapin","Honey Locust","Hophornbeam","Huckleberry Shrub","Japanese Hemlock","Japanese Nutmeg","Judas Tree","Lawson Cypress","Loblolly Bay","Mexican Buckeye","Necklacepod","Northern Bilberry","Northern White Cedar","Octopus Tree","Osage Orange","Paper Bark Tree","Pawpaw","Persian Silk Tree","Princess Tree","Smooth Sumac","Sourwood","Southern Wax Myrtle","Tanoak","Tree of Heaven","Turkish Hazel","Western Soapberry","White Mulberry","Yellow Poplar","Yew")
attr Greenspace_Tree_1_Type				= "Random"
@Order(6) @Range(0,1)@Description("Reduces the probability of Tree 1 appearing in a typical designated location, but also controls the Tree quantity at round abouts.")#@Hidden
attr Greenspace_Tree_1_Percentage 		= 1
@Order(7)@Description("Determines the species of the tree/plant selected for secondary tree for more variation. If this is not None, Tree 2 will appear if Tree 1 does not fire with the current percentage. This does mean that you cannot drop tree density if you alternate trees.")@Range("None","Random","Alder Buckthorn","Amazon Sword Plant","American Chestnut","American Sycamore","Apricot","Australian Pine","Baldcypress","Balsam Fir","Bamboo","Banana Tree","Basswood","Bay Laurel","Black Locust","Blue Gum Eucalyptus","Boxwood","Cabbage Palm Fern","California Bay","California Incense Cedar","California Palm","California Redwood","California Walnut","Coconut Palm","Common Hawthorn","Common Whitebeam","Conker Tree","Date Palm","Desert Willow","Douglas Fir","European Beech","European Larch","Ficus","Field Elm","Flannelbush","Flowering Dogwood","Giant Sequoia","Hedgehog Agave","Japanese Angelica Tree","Lacy Tree Philodendron","Leyland Cypress","Lily of the Valley","Lodgepole Pine","Mediterranean Buckthorn","Mexican Palmetto","Mountain Mahogany","Northern Red Oak","Norway Maple","Norway Spruce","Orange Tree","Orchid","Oval-leaved Privet","Palm Lily","Palo Verde","Paper Birch","Parlour Palm","Prickly Pear Cactus","Red Alder","Red Hickory","Rhododendron Azaleas","Rose","Ruffle Palm","Saguaro Cactus","Sassafras","Scots Pine","Sea Islands Yucca","Shadbush","Snake Plant","Southern Magnolia","Spanish Broom","Strawberry Tree","Sugar Maple","Sunflower","Sweetgum","Umbrella Acacia","Western Juniper","White Ash","White Oak","White Poplar","White Willow","Witch Hazel","","_____________________________","GENERICS","","Generic Dead Tree","Generic Stump","Generic Unknown","","_____________________________","PROXIES","","Algarrobo","American Elderberry","American Pepper","American Silverberry","Athel Tamarisk","Avocado","Black Tupelo","Buttonbush","Canada Buffaloberry","Chinaberry Tree","Chinese Tallow Tree","Common Hackberry","Common Holly","Common Persimmon","Desert Bitterbrush","European Hornbeam","Giant Chinquapin","Honey Locust","Hophornbeam","Huckleberry Shrub","Japanese Hemlock","Japanese Nutmeg","Judas Tree","Lawson Cypress","Loblolly Bay","Mexican Buckeye","Necklacepod","Northern Bilberry","Northern White Cedar","Octopus Tree","Osage Orange","Paper Bark Tree","Pawpaw","Persian Silk Tree","Princess Tree","Smooth Sumac","Sourwood","Southern Wax Myrtle","Tanoak","Tree of Heaven","Turkish Hazel","Western Soapberry","White Mulberry","Yellow Poplar","Yew")#@Hidden
attr Greenspace_Tree_2_Type				= "None"

@Group("STREETSCAPE CONNECTIONS","Other Options",10)
@Order(2)@Range("true","false") @Description("Inserts a person for reference scale at doors of buildings.")
attr Insert_Person = "false"

@Group("STREETSCAPE CONNECTIONS","Frontage Options",20)
@Hidden @Order(2)@Range("None","Simple","Porch")
Stair_Types="None"

@Group("TEXTURE SETTINGS","Exterior Elements",11)
@Order(1) @Range("Brick Brown No Mortar Rough Running Bond","Brick Brown No Mortar Running Bond","Brick Brown Running Bond","Brick Grey Running Bond","Brick Red High Contrast Running Bond","Brick Red No Mortar Running Bond","Brick Red Purple Running Bond","Brick Red Recessed Mortar Running Bond","Brick Red Running Bond","Brick Red Stack Bond","Brick Varied Brown Running Bond","Brick White Dirty Running Bond","Brick White Painted Running Bond","Cement Block Dark Grey Running Bond","Cement Block Grey Running Bond","Cement Block Grey Specks Running Bond","Cement Block Light Running Bond","Stucco Redlands Brown","Stucco Redlands Red","Stucco Redlands White","wall_brown","wall_cherry","wall_green","wall_grey","wall_red","wall_stone_1","wall_stone_10","wall_stone_3","wall_stone_4","wall_stone_5","wall_stone_7","wall_stone_9","wall_wood_1","wall_wood_2","wall_wood_3","wall_wood_4","wall_wood_5") @Description("Textures chosen to apply to walls.")
attr Wall_Texture=listRandom("Brick Brown No Mortar Rough Running Bond;Brick Grey Running Bond;Brick Red High Contrast Running Bond;Brick Red No Mortar Running Bond;Brick Red Purple Running Bond;Brick Red Recessed Mortar Running Bond;Brick Red Running Bond;Brick Red Stack Bond;Brick Varied Brown Running Bond;Brick White Dirty Running Bond;Brick White Painted Running Bond;Cement Block Dark Grey Running Bond;Cement Block Grey Running Bond;Cement Block Grey Specks Running Bond;Cement Block Light Running Bond;Stucco Redlands Brown;Stucco Redlands Red;Stucco Redlands White;wall_brown;wall_cherry;wall_green;wall_grey;wall_red;wall_stone_1;wall_stone_10;wall_stone_3;wall_stone_4;wall_stone_5;wall_stone_7;wall_stone_9")
@Order(2) @Range(.1,10) @Description("Scale of the texture in meters applied to the texture.")
attr Wall_Texture_Scale=2
@Order(3) @Range("Stucco Redlands Brown","Stucco Redlands Red","Stucco Redlands White","wall_concrete_4","wall_concrete_6","Wood Endless Plywood","Wood Floor Clean Light","Wood Floor Clean Square","Wood Floor Clean","Wood Planks New Fence")@Description("Textures chosen to apply to Doors.")
attr Door_Texture=listRandom("Stucco Redlands Brown;Stucco Redlands Red;Stucco Redlands White;wall_concrete_4")
@Order(4) @Range(.1,10) @Description("Scale of the texture in meters applied to the texture.")
attr Door_Texture_Scale=2
@Order(5) @Range("Stucco Redlands Brown","Stucco Redlands Red","Stucco Redlands White","wall_concrete_4","wall_concrete_6","Wood Endless Plywood","Wood Floor Clean Light","Wood Floor Clean Square","Wood Floor Clean","Wood Planks New Fence") @Description("Textures chosen to apply to Frames.")
attr Frame_Texture=listRandom("Wood Endless Plywood;Wood Floor Clean Light;Wood Floor Clean Square;Wood Floor Clean;Wood Planks New Fence")
@Order(6) @Range(.1,10) @Description("Scale of the texture in meters applied to the texture.")
attr Frame_Texture_Scale=2
@Order(7) @Range("Flat Metal 1","Flat Metal 10","Flat Metal 11","Flat Metal 12","Flat Metal 13","Flat Metal 14","Flat Metal 15","Flat Metal 16","Flat Metal 17","Flat Metal 18","Flat Metal 19","Flat Metal 2","Flat Metal 20","Flat Metal 3","Flat Metal 4","Flat Metal 5","Flat Metal 6","Flat Metal 7","Flat Metal 8","Flat Metal 9","Gravel","Green Roof")@Description("Textures chosen to apply to Flat Roofs.")
attr Flat_Roof_Texture=listRandom("Flat Metal 9;Gravel;Green Roof")
@Order(8) @Range(.1,10) @Description("Scale of the texture in meters applied to the texture.")
attr Flat_Roof_Texture_Scale=2
@Order(9) @Range("Barrel Tile Brown","Barrel Tile Red Mixed","Camelot Shingle","GAF Elk WeatherMax Charcoal","Mesa Shingle Brown","Shingle Black","Standard Dura Shingle","Standard Shingle","Terracotta Tile Dark Brown","Terracotta Tile Red","Weathered Shingle")@Description("Textures chosen to apply to flat roof.")
attr Sloped_Roof_Texture=listRandom("Barrel Tile Brown;Barrel Tile Red Mixed;Camelot Shingle;GAF Elk WeatherMax Charcoal;Mesa Shingle Brown;Shingle Black;Standard Dura Shingle;Standard Shingle;Terracotta Tile Dark Brown;Terracotta Tile Red;Weathered Shingle")
@Order(10) @Range(.1,10) @Description("Scale of the texture in meters applied to the texture.")
attr Sloped_Roof_Texture_Scale=2

#####################
#Hidden_Attributes
#####################
@Group("Elevation and Lot Attributes", 20)
@Order(1)@Hidden
attr Lot_Area=geometry.area()
@Order(2)@Hidden
attr Ground_Elevation=0
@Order(3)@Hidden
attr FootPrint_Elevation=0
@Order(4)@Hidden
attr Lot_Edge_Count=0


@Group("Building Feature dimensions", 20)
@Order(1) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Window_Width=0
@Order(2) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Window_Height=0
@Order(3) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Window_Spacing=0
@Order(4) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Window_Frame_Thickness=0
@Order(5) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Door_Width= 0
@Order(6) @Range(0,20) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Door_Frame_Thickness=rint(rand(3,9))/ToIn1
@Order(7) @Range(0,10) @Hidden @Description("These set of attributes control the buildings articulation and external potential openings to water.")
attr Door_Depth=-5/ToIn1

@Group("From OSM Building Rule Rule", 30)
// from object attributes
@Hidden
attr height = -1
@Hidden
attr building__levels = -1
@Hidden
attr roof__height = -1
// functions to test for object attribute data
hasBuildingLevels = building__levels != -1
hasRoofHeight = roof__height != -1
hasHeight = height != -1

@Group("Estimated OSM Attributes (can be set by styles)", 40)
// Note: These attributes can be overriden by styles.
// estimated attributes based on default values or overriden by styles
@Hidden
attr estimatedLevels = defaultLevels
@Hidden
attr estimatedRoofForm = defaultRoofForm						// when no obj attr roof__height
@Hidden
attr estimatedNonFlatRoofForm = defaultNonFlatRoofForm			// when obj attr roof__height>0
@Hidden
attr estimatedFloorHeight = defaultFloorHeight



################
#Functions- functions and calculations used throughout the rule
################
#Path Functions
_Generate_File_Path(Folder,BaseName,Ext)=
	str(Folder)+str("/")+str(BaseName)+str(Ext)
#Math Functions
_ZeroIf(num, target)=
	case num<=target:
		0
	else:
		1
_Maxof(num1,num2)= #Finds the max of two numbers
	case num1>=num2:
		num1
	else:
		num2
_Minof(num1,num2)= #Finds the min of two numbers
	case num1<=num2:
		num1
	else:
		num2		
_isEven(num)=
	case num%2==0:
		true
	else:
		false
#Flood Functions		
_DesignFloodHeight= Base_Flood_Elevation+Free_Board_Requirement		
	
_Inundation=Base_Flood_Elevation-Grade_Elevation #above lot elevation

_FootPrintInundation=Base_Flood_Elevation-FootPrint_Elevation

_FloodedFloors= case _FootPrintInundation<=0:
					0
				case _FootPrintInundation>0 && _FootPrintInundation<Ground_Floor_Height:
				    1
				else: 
					ceil(((_FootPrintInundation-Ground_Floor_Height)/Floor_Height)+1) #close to exact if not exact
				
_Flood_Damage_Percent =abs(_FloodedFloors/Floor_Count)
				
#_HAZUSFloorsAdjustment(Min_Floors) = case Floor_Count_Abs<=Min_Floors:
#										1
#									else:
#										_Minof(1, (_FloodedFloors+(Min_Floors))/_Maxof(1,(Floor_Count_Abs)))

_GroundFloorFloodCeil =Ground_Elevation+_DesignFloodHeight+Ground_Floor_Height

_FloorFloodCeil =Ground_Elevation+_DesignFloodHeight+Floor_Height

_FlFloodBaseHeight=Ground_Elevation+_DesignFloodHeight

#Reactive Functions
_ReactiveWindowGap(floorheight,adaptivePush)= .25*floorheight

_Foundation_Type = 
		case find(Elevate_Structure,"Solid",0)!=-1 || find(Elevate_Structure,"Slab",0)!=-1: 
			"Slab Foundation"
		case find(Elevate_Structure,"Piling",0)!=-1 ||find(Elevate_Structure,"Pier",0)!=-1: 
			"Pier Foundation"
		else:
			"Other Foundation"
_Stories_Type=
		case find(HAZUS_Land_Use_1,"RES2",0)!=-1:
			"Mobile Home"
		case Floor_Count<=1:
			"One Story"
		else:
			"Two Story"
			
#Passed Values defined by logic
_NonFloodWallColor= 
					case _FootPrintInundation<=0:
						No_Flood_Risk_Color 
					else:
						colorRamp( Flood_Risk_Color_Range ,_FloodedFloors/Floor_Count_Abs)

# Normalization to 0 to 1 range.
dataValueAdj(dataValueOriginal,Max_Data_Value, Min_Data_Value) = 
case dataValueOriginal < Min_Data_Value: Min_Data_Value
case dataValueOriginal > Max_Data_Value: Max_Data_Value
else: dataValueOriginal

normalValue(dataValue,Max_Data_Value,Min_Data_Value) = 
NormalMin + (((dataValueAdj(dataValue,Max_Data_Value,Min_Data_Value) - Min_Data_Value ) 
* ( NormalMax - NormalMin ))
/ ( Max_Data_Value - Min_Data_Value))

#Initial Settings and Default values
_initialFootprint = case find(HAZUS_Land_Use_1,"RES",0)!=-1: "L-Shaped"
					else: 
						45%: "L-Shaped"
						15%: "U-Shaped"
						else:"Square"

_initialHeight=((Floor_Count_Abs-1)*Floor_Height)+Ground_Floor_Height
_initialBaseHeights=Max_Height-Floor_Height*3
_initialTotalHeight = _initialHeight + _DesignFloodHeight +.3048
_Height_Limit_Exceedance = case Height_Limit - _initialTotalHeight > 0: 0 else:  abs(Height_Limit - _initialTotalHeight)

_getLevels = 
	case hasBuildingLevels:
		building__levels
	case hasHeight:
		case hasRoofHeight:
			max(rint((height - roof__height)/estimatedFloorHeight), 1)
		else:
			max(rint((height - defaultNonFlatRoofHeight)/estimatedFloorHeight), 1)
	else:
		estimatedLevels

// estimated roof height - depends on Roof_Form
// Note: This quantity is not available for styles to override

		
_initialOSMBuildingHeight(LU)=
					case _getLevels != 0:
						_getLevels*Floor_Height
					else: 
						_initialFloorCount(LU)*Floor_Height
_initialFloorCount(LU)= 
					case find(LU_SLR.getValueByDORUC(LU,LU_SLR.Intensity_Class),"Low",0)!=-1:
						float(listRandom("1;1;1;1;1;1;2;2;2;3"))
					case find(LU_SLR.getValueByDORUC(LU,LU_SLR.Intensity_Class),"Mid",0)!=-1:
						float(listRandom("4;4;4;4;4;5;5;6;7"))
					case find(LU_SLR.getValueByDORUC(LU,LU_SLR.Intensity_Class),"High",0)!=-1:
						float(listRandom("8;8;8;8;8;8;8;9;9;10;11;12;13;14;15")	) 
					else:
						float(listRandom("1;1;1;1;1;2"))
					

_initialBuildingType(land_use,prob1,prob2,prob3)= 
				case p(prob1):
					LU_SLR.getValueByDORUC(DORUC_Land_Use,LU_SLR.Building_Type_1)
				case p(prob2):
					LU_SLR.getValueByDORUC(DORUC_Land_Use,LU_SLR.Building_Type_2)
				case p(prob3):
					LU_SLR.getValueByDORUC(DORUC_Land_Use,LU_SLR.Building_Type_3)
				else:
					LU_SLR.getValueByDORUC(DORUC_Land_Use,LU_SLR.Building_Type_1)
				
				
#Building Functions and Features
_Transparency(Location,floornum)= 
	case Location== "Window": 
		case find(_Land_Use_Floor(floornum),"COM10",0)!=-1||find(_Land_Use_Floor(floornum),"Parking",0)!=-1:
			1
		else:
			_Maxof((Transparency +.33),.5) 
	else: Transparency
	
_Specularity(Location)= case Location== "Window":1  else: 0

_Building_Color(Location)=
	case Location=="Window":
		Window_Color
	case Location=="Door":
		Door_Color
	case Location=="Roof":
		Roof_Color
	case Location=="Frame Top" || Location=="Frame Side":
		Frame_Color
	else:
		Wall_Color
_Land_Use_Floor(floornum)=	
	case bool(Wet_Proof):
		case (floornum)>(Use_2_Floors):
			HAZUS_Land_Use_1
		else:
			Wet_Floor_Allocation
	else:
		case ( HAZUS_Land_Use_2 =="None"||(floornum)>(Use_2_Floors)):
			HAZUS_Land_Use_1
		else:
			HAZUS_Land_Use_2

			
_Usage_Color (floornum,floortotal)=
	case find(_Land_Use_Floor(floornum),"RES",0)!=-1:
		case floortotal<=3:
			SFCol
		else:
			MFCol
	case find(_Land_Use_Floor(floornum),"GOV",0)!=-1:
		GovCol
	case find(_Land_Use_Floor(floornum),"COM10",0)!=-1:
		ParkingStoreCol
	case find(_Land_Use_Floor(floornum),"COM1",0)!=-1:
		RetCol
	case find(_Land_Use_Floor(floornum),"IND",0)!=-1:
		IndusCol
	case find(_Land_Use_Floor(floornum),"COM",0)!=-1:
		ComOCol
	case find(_Land_Use_Floor(floornum),"AGR",0)!=-1:
		OtherCol
	else:
		ElseCol
		
_Build_Type_Color=
	case HAZUS_Building_Type=="Wood":
		WoodCol
	case HAZUS_Building_Type=="Steel":
		SteelCol
	case HAZUS_Building_Type=="Concrete":
		ConcreteCol
	case HAZUS_Building_Type=="Mobile Home":
		MobileCol
	case HAZUS_Building_Type=="Masonry":
		MasonCol
	else:
		ErrorCol		
		
_Window_Width_Usage(floornum)=
	case Window_Width!=0:
		Window_Width
	case find(_Land_Use_Floor(floornum),"RES" ,0)!=-1:
		case Floor_Count<=3:
			rint(rand5to7)/ToFt1
		else:
			rint(rand3to6)/ToFt1 
	case find(_Land_Use_Floor(floornum),"IND" ,0)!=-1:
		rint(rand8to12)/ToFt1
	case find(_Land_Use_Floor(floornum),"AGR" ,0)!=-1:
		rint(rand10to12)/ToFt1
	else:
		rint(rand6to8)/ToFt1
		
_Window_Height_Usage(floornum)=
	case Window_Height!=0:
		Window_Height
	case find(_Land_Use_Floor(floornum),"RES" ,0)!=-1:
		case Floor_Count<=3:
			rint(rand5to7)/ToFt1
		else:
			rint(rand5to7)/ToFt1
	case find(_Land_Use_Floor(floornum),"COM1" ,0)!=-1:
		rint(rand7to9)/ToFt1
	case find(_Land_Use_Floor(floornum),"COM" ,0)!=-1:
		rint(rand10to14)/ToFt1
	case find(_Land_Use_Floor(floornum),"IND" ,0)!=-1:
		rint(rand6to10)/ToFt1
	case find(_Land_Use_Floor(floornum),"GOV" ,0)!=-1:
		rint(rand7to9)/ToFt1
	case find(_Land_Use_Floor(floornum),"AGR",0)!=-1:
		rint(rand10to12)/ToFt1
	else:
		rint(rand5to7)/ToFt1
		
_Window_Spacing_Usage(floornum)=
	case Window_Spacing!=0:
		Window_Spacing
	case find(_Land_Use_Floor(floornum),"RES",0)!=-1:
		case Floor_Count<=3:
			rint(rand6to10)/ToFt1
		else:
			rint(rand1to5)/ToFt1
	case find(_Land_Use_Floor(floornum),"COM",0)!=-1:
		rint(rand0to2)/ToFt1
	case find(_Land_Use_Floor(floornum),"AGR",0)!=-1:
		rint(rand0to1)/ToFt1
	else:
		rint(rand1to3)/ToFt1
_Window_Frame_Thickness_Usage(floornum)=
	case Window_Frame_Thickness!=0:
		Window_Frame_Thickness
	case find(_Land_Use_Floor(floornum),"RES",0)!=-1:
		rint(rand3to6)/ToIn1
	case _Land_Use_Floor(floornum)=="COM10":
		rint(rand10to12)/ToIn1
	case _Land_Use_Floor(floornum)=="COM1":
		rint(rand4to8)/ToIn1
	case find(_Land_Use_Floor(floornum),"COM",0)!=-1:
		rint(rand2to5)/ToIn1
	case find(_Land_Use_Floor(floornum),"GOV",0)!=-1:
		rint(rand7to9)/ToIn1
	else:
		rint(rand4to8)/ToIn1
		
_Door_Width_Usage(floornum)=
	case Door_Width!=0:
		Door_Width
	case find(_Land_Use_Floor(floornum),"RES",0)!=-1:
		case Floor_Count<=3:
			6/ToFt1 
		else:
			12/ToFt1 
	case find(_Land_Use_Floor(floornum),"IND",0)!=-1:
		16/ToFt1
	case find(_Land_Use_Floor(floornum),"AGR",0)!=-1:
		20/ToFt1
	else:
		12/ToFt1		
_Setback_Determination(attrSetback,floornum,setbackFloornum,setbackType)=
	case floornum<=setbackFloornum && setbackType!="One Setback":
		0
	case setbackType=="One Setback":
		case floornum==setbackFloornum:
			attrSetback
		else:
			0
	case setbackType=="Alternating":
		case _isEven(floornum):
			attrSetback
		else:
			0
	else:#wedding cake
		attrSetback		
_Cumulative_Setback(floornum,setbackType)=
	case setbackType=="One Setback":
		Building_Setback
	case setbackType=="Alternating":
		((floornum-Building_Setback_Floor)*Building_Setback)/2.0
	else:
		(floornum-Building_Setback_Floor)*Building_Setback

#Reporting Functions
_isWall(Location)= case Location=="Wall"||Location=="Window"||Location=="Door" || Location=="Frame Top":true else: false
##########################
#Constants

const NormalMin = 0
const NormalMax = 1
const _Texture_Switch = case bool(Scenario_Representation=="Textured"): 4 else: 0 # This switch will delete the opacity map UV if texturing is on- transparencys mess with the tree transparencies anyway. If you want UVset 4 you can change the 4 to a 999 and it should work...but only through an unhandled exception
const Texturing_On = bool(Scenario_Representation=="Textured")
const GS_Has_Tree = find(Greenspace_Type,"Tree",0)!=-1
const peakRunoffDisplayOn = Scenario_Representation =="Peak Runoff/Permeability"
const CS_len=3.5
const CS_wid=3.5
const CS_hei=2
const Roof_Overhang=.8
const stilt_width=.61
const stilt_spacing=3
const stilt_setback=2.5
const first_Floor=1
const oneInch=0.0254
const roofEdgeHeight=24*oneInch

const Insert_Adjustment=1- Roof_Angle /90
const FreshWat_SpcWeig=64.4 #lb/ft^3
const SaltWat_SpcWeig=64.0 #lb/ft^3
#Random Ranges
const rand0to1= rand(0,1)
const rand0to2= rand(0,2)
const rand0to3= rand(0,3)
const rand1to2= rand(1,2)
const rand1to3= rand(1,3)
const rand2to5= rand(2,5)
const rand2to8= rand(2,8)
const rand3to6= rand(3,6)
const rand4to6= rand(4,6)
const rand4to7= rand(4,7)
const rand5to7= rand(5,7)
const rand6to8= rand(6,8)
const rand6to10= rand(6,10)
const rand7to9= rand(7,9)
const rand8to12= rand(8,12)
const rand10to12= rand(10,12)
const rand8to14= rand(8,14)
const rand10to14= rand(10,14)
const rand1to5= rand(1,5)
const rand4to8= rand(4,8)
#Stairs
const Stair_Slope=.91 #(8.25 in high, 9 in run)
const Stair_Height=0.2286
const Stair_Run=0.20
const Max_Stair_Setback=2
const Landing_Width=2
const Landing_Height=.28
#Unit conversions
const ToFt3=35.3147 #1 meter ^3 = 35.3 cubic feet
const ToFt2=10.7639 #1 meter ^2 = 10.7 square feet
const ToFt1=3.2808399 #1 meter = 3.28 ft
const ToIn1=39.37 #1 meter = 39.37 in
#Color Lists and colors
const Window_List="#394a53;#00FFE5#92E8DD;#B0F7F5"
const Window_Color=listRandom(Window_List)
const Wall_List="#C5E0DC;#003e3b;#6d0303;#5f2428;#737291c;#ECE5CE;#F1D4AF;#342931;#85504C;#aea7a0;#EEBA7E;#BDCAD0;#808787;#FE8B05;#fffaf3;#fffff3;#fDfDf3;#fdfdf3;#ffffff"
const Wall_Color=listRandom(Wall_List)
const Roof_List="#824c3b;#9f9182;#5e9e9a;#cc7761;#3f261f;#5f4240;#D8C7C2;#b1a19d;#C5C0C;#fdfcff;#744741;#d6d6d1;"
const Roof_Color=listRandom(Roof_List)
const Door_List="#771635;#4E3612;#78643A;#EDDEA7"
const Door_Color=listRandom(Door_List)
const Frame_List="#F2963F;#5f2428;#D9271B;#144184;#212b9c;#6d0303;#D17668;#9CAFB7;#123146;#78261c"
const Frame_Color=listRandom(Frame_List)
const Light_Gray="#d3d3d3"
const Dark_Gray= "#939393"
const Dark_Blue="#0a39FF"
const SFCol="#CECE00"
const MFCol="#FF9900"
const GovCol="#0A70FD"
const ComOCol="#E40000"
const RetCol="#ff8080"
const IndusCol="#df72ff"
const OtherCol="#FFFFFF"
const ParkingStoreCol ="#8b8b8b"
const ErrorCol="#DD0000"
const ElseCol="#000000"
const WoodCol="#82520b"
const ConcreteCol= "#6f7070"
const SteelCol= "#c1c1dd"
const MasonCol="#8c0808"
const MobileCol="#06c6d1"
const TreeCol="#B5DC98"
const NACTOPlanting="#B5DC98"
const DarkRed = "#a30303"

#Misc Constants
const Critical_Exception= _Minof(_FlFloodBaseHeight+CS_hei,Ground_Floor_Height)
#Attribute Absolute Values
const Floor_Count_Abs=abs(Floor_Count)
const Underfloors_abs=abs(Underfloors)
# Vegetation and Hardscape costs 
const TreeCostAverage = 750 
const GrassSurfaceCostAverage = 10	# In square meters
const HardscapePaverCost = 25		# In square meters
# OSM Const
const defaultLevels = 2
const defaultRoofForm = "flat"
const defaultNonFlatRoofForm = "gable"
const defaultFloorHeight = 3.7
const defaultNonFlatRoofHeight = 3
#################
#Rules
#
#Lot Start Rule
@StartRule
Footprint-->
	Footprint_ReplaceOrBuild
	
Footprint_ReplaceOrBuild-->
	case bool(Relocate): #Should relocation be on the lot level or building level?
		case Replace_With=="Natural":
			Green_Space_Start
		case Replace_With=="Parking/Storage":
			color(ParkingStoreCol)
		case Replace_With=="Vacant Lot":
			color(ElseCol)
		case Replace_With=="Other":
			color(OtherCol)
		else: 
			color(ErrorCol)
			print("Error: Replace with not accepted category")
	else:
		FootPrint_GeometryCheck

		
FootPrint_GeometryCheck -->
	case geometry.isConcave():
		convexify(3)Footprint_SizeCheck
	else:
		Footprint_SizeCheck
		
Footprint_SizeCheck-->
	case geometry.nFaces > 1:
		comp(f){all: alignScopeToAxes(y) Footprint_SizeCheck }
	case scope.sx < 1 || scope.sz < 1:
		Green_Space_Start
	else:
		FootPrintFoundation
FootPrintFoundation -->
	#Report footprint area, declare underfloor extrusion
	report("Zoning.Initial Footprint Area (M^2)",geometry.area())
	Underground
	Elevate_Building
	label("Foot Print")
	
	
#Underground portion of Building Rule
Underground-->
	#Underfloor extrusion step
	case Underfloors_abs>=1 && !bool(Fill_UnderFloors):
		alignScopeToAxes(y)
		extrude(rint(abs(Underfloors))*-Floor_Height)
		Under_Floors
	case Underfloors_abs>=1 && bool(Fill_UnderFloors):
		alignScopeToAxes(y)
		extrude(rint(abs(Underfloors))*-Floor_Height)
		comp(f) {top:Cement("Filled Underfloor",Light_Gray)|side: Cement("Filled Underfloor",Light_Gray)}
		color(.4,.4,.4)
	else:
		NIL

Under_Floors-->
	split(y){{Floor_Height:Underground_Floors(-split.index-1,-split.total-1)}*}	

Underground_Floors(floornum,totalfloors)-->
	alignScopeToAxes(y)
	comp(f) {bottom:Floor_Base(floornum,totalfloors)
			|street.front:Street_Facing(floornum,totalfloors)
			|street.back:Rear_Facing(floornum,totalfloors)
			|side:Exterior_Sidewall(floornum,totalfloors)}
	
Elevate_Building-->
	#Elevation of building based on scenario, if no elevation, declare massing
	case Elevate_Structure=="Solid Raise":
		extrude(Elevation_Height)
		comp(f){top:ActualFootPrint|street.front:Stair_Side("Stair Side")|side:Cement("Solid Raise",Light_Gray)}
	case Elevate_Structure=="Piling":
		extrude (Elevation_Height)
		comp(f){top:ActualFootPrint|street.front:Stair_Side("Stair Side")|bottom:reverseNormals Piling_Subdivision_Setback("Raise",0)}
	else: 
		ActualFootPrint
		
ActualFootPrint-->
		set(FootPrint_Elevation,scope.elevation)
		report("Flood Forces.DFE Lateral Hydrostatic Forces on Walls (shrt tons)",(_ZeroIf(_DesignFloodHeight,0)*((pow((_DesignFloodHeight-scope.elevation),2))*ToFt1*FreshWat_SpcWeig*0.5)/2000))
		#Start Triplet Reports
		report("Flood Depth.Inundation Depth at Footprint Level",_FootPrintInundation)
		report("Flooded Floors.Inundated number of Floors",_FloodedFloors)
		report("Flooded Floors DORUC."+str(DORUC_Land_Use)+ ".Inundated number of Floors",_FloodedFloors)
		report("Flooded Floors HAZUS LU."+str(HAZUS_Land_Use_1)+ ".Inundated number of Floors",_FloodedFloors)
		report("Flood Depth DORUC."+str(DORUC_Land_Use)+ ".Inundation Depth at Footprint Level",_FootPrintInundation)
		report("Flood Depth HAZUS LU."+str(HAZUS_Land_Use_1)+ ".Inundation Depth at Footprint Level",_FootPrintInundation)
		report("HAZUS Total Percentage.Damage Percentage", _Flood_Damage_Percent )
		report("HAZUS Total Market Value.Damaged Market Value", _Flood_Damage_Percent *Market_Value)
		report("HAZUS DORUC Percentage."+str(DORUC_Land_Use)+ ".Damage Percentage", _Flood_Damage_Percent )
		report("HAZUS DORUC Market Value"+str(DORUC_Land_Use)+ ".Damaged Market Value", _Flood_Damage_Percent *Market_Value)
		report("HAZUS LU Cat Percentage."+str(HAZUS_Land_Use_1)+ ".Damage Percentage", _Flood_Damage_Percent )
		report("HAZUS LU Cat Market Value."+str(HAZUS_Land_Use_1)+ ".Damaged Market Value", _Flood_Damage_Percent *Market_Value)
		report("Height Limits.Total Exceedance", _Height_Limit_Exceedance)
		Deployable_Flood_Bar("Foot Print")
		Building_Setback_Rule(first_Floor)
			
Building_Setback_Rule(floornum)-->
	case floornum==first_Floor || _Cumulative_Setback(floornum,Building_Setback_Type)>Setback_Size_Threshold :
		alignScopeToAxes(y)
		Massing(floornum)
			
	else:
		case Building_Setback_Side=="Front": #Building_Setback_Side"Front","Back","Right and Left Side","All Sides"
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{object.front:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}
		
		case Building_Setback_Side=="Back":
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{street.back:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}
		
		case Building_Setback_Side=="Right and Left Side":
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{street.right:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")|
			street.left:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}
			
		case Building_Setback_Side=="All Sides":
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{all:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}
			
		case Building_Setback_Side=="Right and Left Side": 
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{object.back:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}	
		else:	
			setback(_Setback_Determination(Building_Setback,floornum,Building_Setback_Floor,Building_Setback_Type))
			{street.front:extrude(oneInch) Floor_Material_Setup(floornum,Floor_Count_Abs,"Roof")
			|remainder:Massing(floornum)}
		

Stair_Side(Location)-->
	case scope.sx>=10/ToFt1:
		case Elevate_Structure=="Solid Raise":
			alignScopeToAxes(y)
			split(x){~1:Cement("Solid Raise",Light_Gray)|
					 (_Door_Width_Usage(0)*1.5):Stair_Case_Rule(case Elevation_Height/Stair_Slope<Max_Stair_Setback:"Stair Out" else: "With Landing")|
					 ~1:Cement("Solid Raise",Light_Gray)}
		else:
			alignScopeToAxes(y)
			split(x){~1:NIL|
				 (_Door_Width_Usage(0)*1.5):Stair_Case_Rule(case Elevation_Height/Stair_Slope<Max_Stair_Setback:"Stair Out" else: "With Landing")|
				 ~1:NIL}
	else: 
	 	NIL

Stair_Case_Rule(Stair_Type)-->
	case Stair_Type=="With Landing":
		alignScopeToAxes(y)
		split(y) {~1:[case Elevate_Structure=="Solid Raise":Cement("Solid Raise",Light_Gray)else:NIL]|
				 Landing_Height:Platform_Creation(Stair_Type) }
	else:
		alignScopeToAxes(y)
		split(y){~Stair_Height:Stair_Extrusion(Stair_Type,split.index,split.total)}*

Stair_Extrusion(Stair_Type,stairNum,stairTotal)-->
	extrude(((stairTotal-stairNum)/ToFt1)*(1-Stair_Run))
	comp(f) {top:Cement("Stairs",Light_Gray)|side:Cement("Stairs",Light_Gray)|bottom:Cement("Stairs",Light_Gray)}

Platform_Creation(Stair_Type)-->
	extrude(Landing_Width)
	Cement("Stairs",Light_Gray)
	comp(f){3:Stairs_From_Platform(comp.index,Elevation_Height-Landing_Height)|
			object.bottom:Piling_Subdivision("Platform Supports",Landing_Height)}

Stairs_From_Platform(index,loop_counter)-->
	case loop_counter>0:
		alignScopeToAxes(y)
		t(0,-Stair_Height,0)
		extrude(Stair_Run)
		Cement("Stairs",Light_Gray)
		comp(f){1:Stairs_From_Platform(index,loop_counter-Stair_Height)}		
	else:
		NIL

Piling_Subdivision(Location,Extrusion_Adjuster)-->
	#declare piling splits for, creates grid squares
	split(x){stilt_width:
	split(y){stilt_width:Piling("Piling Raise",Extrusion_Adjuster)
		|{~stilt_spacing:Cement("Under Piling",Light_Gray)
		|stilt_width:Piling("Piling Raise",Extrusion_Adjuster)}*}
			|{~stilt_spacing:Cement("Under Piling",Light_Gray)
			|stilt_width:split(y){stilt_width:Piling("Piling Raise",Extrusion_Adjuster)
			|{~stilt_spacing:Cement("Under Piling",Light_Gray)
			|stilt_width:Piling("Piling Raise",Extrusion_Adjuster)}*}}*}
			
Piling_Subdivision_Setback(Location,Extrusion_Adjuster)-->
	#declare piling splits for, creates grid squares
	#print(geometry.isConcave)
	case geometry.area()<10:
		Cement("Under Piling",Light_Gray)
	else:
		setback(stilt_width,0){all:convexify Piling_Base_Setup ("Piling Raise",Extrusion_Adjuster)|remainder:
		setback(stilt_spacing){all:Cement("Under Piling",Light_Gray)|remainder:Piling_Subdivision_Setback(Location,Extrusion_Adjuster)}}

Piling_Base_Setup (Location,Extrusion_Adjuster)-->
	alignScopeToAxes(y)
	comp(f) {top:Piling_From_Wall(Location,Extrusion_Adjuster)}
	
Piling_From_Wall(Location,Extrusion_Adjuster)-->
	alignScopeToGeometry(yUp,0,longest)
	split(x) {stilt_width:Piling("Piling Raise",Extrusion_Adjuster)
		|{~stilt_spacing:Cement("Under Piling",Light_Gray)
		|stilt_width:Piling("Piling Raise",Extrusion_Adjuster)}*}	
	
Massing(floornum)-->
	#align massing up, create with envelop function
	case floornum==first_Floor:
		alignScopeToAxes(y)
		report("Flood Forces.DFE Bouancy Force on Building Footprint (shrt tons)",_Maxof(((_Minof((_DesignFloodHeight-scope.elevation),Ground_Floor_Height)*geometry.area())*ToFt3*FreshWat_SpcWeig)/2000,0))
		extrude(Ground_Floor_Height)
		Floors(floornum)
	case floornum<=Floor_Count_Abs:
		alignScopeToAxes(y)
		report("Flood Forces.DFE Bouancy Force on Building Footprint (shrt tons)",_Maxof(((_Minof((_DesignFloodHeight-scope.elevation),Floor_Height)*geometry.area())*ToFt3*FreshWat_SpcWeig)/2000,0))
		extrude(Floor_Height)
		Floors(floornum)
	else:
		alignScopeToAxes(y)
		Floors(floornum)		
		
Floors_Split-->
	split(y){Ground_Floor_Height:Ground_Floor(split.index,split.total-1)
			|{Floor_Height:Other_Floors(split.index,split.total-1)}*}
Floors(floornum)-->
	case floornum==first_Floor:			
		Ground_Floor(floornum,Floor_Count_Abs)
	else:
		Other_Floors(floornum,Floor_Count_Abs)
Ground_Floor(floornum,totalfloors)-->
	case floornum<totalfloors:
		comp(f) {bottom:Floor_Base(floornum,totalfloors)
		|street.front:Ground_Street_Facing(floornum,totalfloors)
		|street.back:Ground_Rear_Facing(floornum,totalfloors)
		|side:Ground_Exterior_Sidewall(floornum,totalfloors)
		|top: Building_Setback_Rule (floornum+1)}
	else:
		comp(f) {top:Roof_Setup(floornum+1,totalfloors+1)
		|bottom:Floor_Base(floornum,totalfloors)
		|street.front:Ground_Street_Facing(floornum,totalfloors)
		|street.back:Ground_Rear_Facing(floornum,totalfloors)
		|side:Ground_Exterior_Sidewall(floornum,totalfloors)}


Other_Floors(floornum,totalfloors)-->
		case floornum!=totalfloors:
			comp(f) {bottom:Floor_Base(floornum,totalfloors)
					|street.front:Street_Facing(floornum,totalfloors)
					|street.back:Rear_Facing(floornum,totalfloors)
					|side:Exterior_Sidewall(floornum,totalfloors)
					|top: Building_Setback_Rule(floornum+1)}
		else:
			comp(f){top:Roof_Setup(floornum+1,totalfloors+1)|# Add ceiling on last floor
					bottom:Floor_Base(floornum,totalfloors)|
					street.front:Street_Facing(floornum,totalfloors)|
					street.back:Rear_Facing(floornum,totalfloors)|
					side:Exterior_Sidewall(floornum,totalfloors)}
	
Ground_Street_Facing(floornum,totalfloors)-->
	case scope.sx >30/ToFt1 && LOD_Setting!="Low":
		Windows_And_Door_Subdivide(floornum,totalfloors,"Windows+Door Subdivider")
	case scope.sx>=10/ToFt1 && scope.sx<=30/ToFt1 && LOD_Setting!="Low":
		Just_Door_Subdivide(floornum,totalfloors,"Door Subdivide")
	else:#Plain Wall
		alignScopeToAxes(y)
		Floor_Material_Setup(floornum,totalfloors,"Wall")
		
Windows_And_Door_Subdivide(floornum,totalfloors,Location)-->
	alignScopeToAxes(y)
	split(x){~1:Window_Repeater(floornum,totalfloors,"Window Repeater")
			|(_Door_Width_Usage(floornum)):Door_Split(floornum,totalfloors,"Door Split")
			|~1:Window_Repeater(floornum,totalfloors,"Window Repeater")}

Just_Door_Subdivide(floornum,totalfloors,Location)-->		
	alignScopeToAxes(y)
	split(x){~(_Window_Spacing_Usage(floornum)+1): Floor_Material_Setup(floornum,totalfloors,"Wall")
			|(_Door_Width_Usage(floornum)):Door_Split(floornum,totalfloors,"Door Split")
			|~(_Window_Spacing_Usage(floornum)+1): Floor_Material_Setup(floornum,totalfloors,"Wall")}
			
Ground_Rear_Facing(floornum,totalfloors)-->
	case scope.sx >=30/ToFt1 && LOD_Setting!="Low" && Elevate_Structure=="None":
		Windows_And_Door_Subdivide(floornum,totalfloors,"Windows+Door Subdivider")
	case scope.sx>=10/ToFt1 && LOD_Setting!="Low":
		Window_Repeater(floornum,totalfloors,"Window Repeater")
	else:#Plain Wall
		alignScopeToAxes(y)
		Floor_Material_Setup(floornum,totalfloors,"Wall")

Ground_Exterior_Sidewall(floornum,totalfloors)-->
	case scope.sx >10/ToFt1 && LOD_Setting!="Low":
		Window_Repeater(floornum,totalfloors,"Window Repeater")
	else:
		Floor_Material_Setup(floornum,totalfloors,"Wall")
	

Street_Facing(floornum,totalfloors)-->
	case scope.sx >10/ToFt1 && LOD_Setting!="Low":
		Window_Repeater(floornum,totalfloors,"Window Repeater")
	else:
		Floor_Material_Setup(floornum,totalfloors,"Wall")

Rear_Facing(floornum,totalfloors)-->
	case scope.sx >10/ToFt1 && LOD_Setting!="Low":
		Window_Repeater(floornum,totalfloors,"Window Repeater")
	else:
		Floor_Material_Setup(floornum,totalfloors,"Wall")	

Exterior_Sidewall(floornum,totalfloors)-->
	case scope.sx >10/ToFt1 && LOD_Setting!="Low":
		Window_Repeater(floornum,totalfloors,"Window Repeater")
	else:
		Floor_Material_Setup(floornum,totalfloors,"Wall")
		
Window_Repeater(floornum,totalfloors,Location)-->
	alignScopeToAxes(y)
	split(x){~_Window_Spacing_Usage(floornum): Floor_Material_Setup(floornum,totalfloors,"Wall")
			|~_Window_Width_Usage(floornum): Window_Split(floornum,totalfloors,"Window Split")
			|~_Window_Spacing_Usage(floornum): Floor_Material_Setup(floornum,totalfloors,"Wall")}*

Window_Split(floornum,totalfloors,Location)-->
	alignScopeToAxes(y)
	split(y){~_ReactiveWindowGap(scope.sy,1): Floor_Material_Setup(floornum,totalfloors,"Wall")
			|(_Window_Height_Usage(floornum)): Window_Shape(floornum,totalfloors,Location)
			|~_ReactiveWindowGap(scope.sy,1): Floor_Material_Setup(floornum,totalfloors,"Wall")}

Window_Shape(floornum,totalfloors,Location)-->
	setback(_Window_Frame_Thickness_Usage(floornum)) { all : Window_Frame(floornum,totalfloors,"Window Frame") 
								| remainder : Floor_Material_Setup(floornum,totalfloors,"Window")}
	[case Window_Defenses=="Flood Shields" && scope.elevation<=(_DesignFloodHeight-.01): Flood_Shield (floornum,totalfloors,"Window Shield") else: NIL]
	#Color_Floor_Wall(floornum,totalfloors,"Window")

Flood_Shield (floornum,totalfloors,Location)-->
	label("Flood Shield")
	extrude(.3)
	report("Adaptive Measures.Flood Shield: "+ Location + " Count",1)
	comp(f) {side:Shield_Side(Location)|
			top:Shield_Top(Location)}

Shield_Side(Location)-->
	color(Light_Gray)
	
Shield_Top(Location)-->
	alignScopeToAxes(y)
	Band_Repeater(Location)
Band_Repeater(Location)-->
	split(y){~.15:Band_1|~.15:Band_2}*
Band_1-->
	color(Dark_Gray)
Band_2-->
	color(Light_Gray)	
	
Door_Split(floornum,totalfloors,Location)-->
	split(y) {~1:Door_Encasing(floornum,totalfloors,Location)
	|'0.2:Floor_Material_Setup(floornum,totalfloors,"Wall")}
	
Door_Encasing(floornum,totalfloors,Location)--> 
	Insert_Person_Rule
	label("Door")
	Door_Push_In(floornum,totalfloors,Location,Door_Depth)
	[case Door_Defenses=="Flood Shields" && scope.elevation<=(_DesignFloodHeight-oneInch): Flood_Shield (floornum,totalfloors,"Door Shield") else: NIL]
	
Insert_Person_Rule-->
	case bool(Insert_Person):
		s(0,2,0)
		i(fileRandom(Other_Folder+"/*.obj"))
#		alignScopeToGeometry(yUp,0,0)
		t(1,0,.5)
		deleteUV(_Texture_Switch)
	else:
	    NIL

Door_Push_In(floornum,totalfloors,Location,Depth)-->
	extrude(Depth)
	comp(f) {top: Floor_Material_Setup(floornum,totalfloors,Location)
			|left: Floor_Material_Setup(floornum,totalfloors,Location)
			|right: Floor_Material_Setup(floornum,totalfloors,Location)
			|bottom:Door_Shape(floornum,totalfloors,Location)}
					
Door_Shape(floornum,totalfloors,Location)-->
	setback(Door_Frame_Thickness){all:Door_Frame(floornum,totalfloors,"Door Frame")|
							remainder:Door(floornum,totalfloors,"Door")}

Window_Frame(floornum,totalfloors,Location)-->
	extrude(1.5/ToIn1)
	comp(f) {top: Floor_Material_Setup(floornum,totalfloors,"Frame Top")|
			 side: Floor_Material_Setup(floornum,totalfloors,"Frame Side")}
Door_Frame(floornum,totalfloors,Location)-->
	extrude(1.5/ToIn1)
	comp(f) {top: Floor_Material_Setup(floornum,totalfloors,"Frame Top")|
			 side: Floor_Material_Setup(floornum,totalfloors,"Frame Side")}
Door(floornum,totalfloors,Location)-->
	Floor_Material_Setup(floornum,totalfloors,Location)

Floor_Base(floornum,totalfloors)-->
	#This is the base for all the floors, all floors, even underground floors are called here. 
	#print(floornum)
	[case scope.elevation<=(_DesignFloodHeight-oneInch):report("Gross Floor Area (GFA-M^2).Below DFE (BFE+FBR)",geometry.area)
	 else:report("Gross Floor Area (GFA-M^2).Above DFE (BFE+FBR)",geometry.area)] #-oneInch to deal with floating point issues #-oneInch to deal with floating point issues
	[case floornum<0:report("Gross Floor Area (GFA-M^2).Below Lot Grade",geometry.area) else:X.]
	report("Zoning.Total GFA",geometry.area)
	report("Zoning.Floor Area Ratio (FAR)",geometry.area/(Lot_Area))
	reverseNormals
	alignScopeToAxes(y)
	Critical_Systems(floornum,totalfloors,"Floors")
	X.
	


Roof_Setup(floornum,totalfloors)-->
	case Critical_System_Allocation=="On Roof" || Roof_Type=="Flat":
		label("Roof")
		set(Roof_Type,"Flat")
		FlatRoof(floornum,totalfloors)
	
	case Roof_Type!="Flat":
		label("Roof")
		AngledRoof(floornum, totalfloors)
	else:
		label("Roof")
		FlatRoof(floornum,totalfloors)
FlatRoof(floornum,totalfloors)-->
	setback(.75) {all : Flat_Roof_Edge(floornum,totalfloors) 
				 |remainder : Roof_Allocation(floornum,totalfloors)}

AngledRoof(floornum,totalfloors)-->
	case Roof_Type=="Hip":
		roofHip( Roof_Angle , Roof_Overhang)
		Floor_Material_Setup(floornum,totalfloors,"Roof")
	case Roof_Type=="Gable":
		roofGable( Roof_Angle , Roof_Overhang)
		Floor_Material_Setup(floornum,totalfloors,"Roof")
	else: #Roof Type =="Shed"
		roofShed( Roof_Angle )
		Floor_Material_Setup(floornum,totalfloors,"Roof")
		
Flat_Roof_Edge(floornum,totalfloors)-->
	extrude(roofEdgeHeight)
	Floor_Material_Setup(floornum,totalfloors,"Roof")#Roof Edge

Roof_Top(floornum,totalfloors)-->
	extrude(oneInch)
	Floor_Material_Setup(floornum,totalfloors,"Roof")

Roof_Allocation(floornum,totalfloors)-->
	case Critical_System_Allocation=="On Roof" && bool(Elevate_Critical_Systems):
		Roof_Top(floornum,totalfloors)
		Critical_Systems(floornum,totalfloors,"Roof")
	else:
		Roof_Top(floornum,totalfloors)
		
Critical_Systems(floornum,totalfloors,Location)-->
	case bool(Elevate_Critical_Systems):
		System_Floor(floornum,totalfloors,Critical_System_Allocation,Location)
	else: #If not on, assume it is on first floor-might add basement control later
		case floornum==1-floor(Underfloors):
			System_Insertion(floornum,totalfloors,"Base Case","On-Ground")
		else:
			NIL

System_Floor(floornum, totalfloors,System_Allocation,Location)-->
	case System_Allocation=="On Roof":
		case Location=="Roof":
			System_Insertion (floornum,totalfloors,System_Allocation,Location)
		else:
			NIL
	case System_Allocation=="Above FBR+BFE":
		case (floornum==0 && (_FlFloodBaseHeight+CS_hei)<Ground_Floor_Height+FootPrint_Elevation)||totalfloors<=1:
			System_Insertion (floornum,totalfloors,System_Allocation,Location)
		case floornum==1 && (_FlFloodBaseHeight+CS_hei)>Ground_Floor_Height+FootPrint_Elevation:
			System_Floor(floornum,totalfloors,"On Floor Above FBR+BFE",Location)
		case floornum!=0 && floornum!=1: 
			System_Floor(floornum,totalfloors,"On Floor Above FBR+BFE",Location)
		else:
			NIL
	#floornum != totalfloors-1 &&
	case System_Allocation=="On Floor Above FBR+BFE":
		case (floornum==0 && FootPrint_Elevation>Base_Flood_Elevation) ||totalfloors<=1:
			System_Insertion (floornum,totalfloors,System_Allocation,Location)
		case floornum!=1:#all other floors other than the first and second
			case _FlFloodBaseHeight<scope.elevation && scope.elevation< _FloorFloodCeil :
				System_Insertion (floornum,totalfloors,System_Allocation,Location)
			else:
				NIL
		#Catches the second floor exception
		case _FlFloodBaseHeight<scope.elevation && scope.elevation< _GroundFloorFloodCeil :
			System_Insertion (floornum,totalfloors,System_Allocation,Location)
		else:
			NIL
	case System_Allocation=="Top Floor of Building":
		case floornum==(totalfloors):
			System_Insertion (floornum,totalfloors,System_Allocation,Location)
		else:
			NIL
	
	else:
		print("Error:Allocation chosen does not match options")

System_Insertion(floornum,totalfloors,System_Allocation,Location)-->
	case !bool(Terminate_Critical_Systems):
		innerRectangle(scope) {shape : Prepare_System_Space(floornum,totalfloors,System_Allocation,Location)
		 | remainder : NIL}	
	else:
		NIL
Prepare_System_Space(floornum,totalfloors,System_Allocation,Location)-->
	alignScopeToAxes(y)
	t((scope.sx/10),0,(scope.sz/10))
	s(min(CS_len,scope.sx-1),0,min(CS_wid,scope.sz - 1))
	System_Creation(floornum,totalfloors,System_Allocation)

System_Creation(floornum,totalfloors,System_Allocation)-->
	case System_Allocation=="Above FBR+BFE":
		case FootPrint_Elevation>Base_Flood_Elevation:
			extrude(CS_hei)
			Critical_System
		case totalfloors==0 && floornum==0:
			extrude(Critical_Exception)
			split(y){Critical_Exception-(CS_hei+.1):Cement("Critical System Base",Light_Gray)
			|CS_hei: Critical_System}
		else:
			extrude(_FlFloodBaseHeight+CS_hei)
			split(y){_FlFloodBaseHeight:Cement("Critical System Base",Light_Gray)
			|CS_hei: Critical_System}
		
	else:
		extrude(CS_hei)
		Critical_System
	
	
Floor_Material_Setup(floornum,totalfloors,Location)-->
	set(material.opacity,1-_Transparency(Location,floornum))
	set(material.shininess,_Specularity(Location))
	set(material.specular.r,_Specularity(Location))
	set(material.specular.g,_Specularity(Location))
	set(material.specular.b,_Specularity(Location))
	set(material.reflectivity,_Specularity(Location))
	Color_Floor_Wall(floornum,totalfloors,Location)
		
Color_Floor_Wall(floornum,totalfloors,Location)-->
	case Scenario_Representation =="Wall Flood Percent":
		#print (scope.elevation)
		alignScopeToAxes(y)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Wall_Surface_Flooded(floornum, totalfloors, geometry.area(),Location)
		Texture_Surfaces(floornum,totalfloors,Location)
	case Scenario_Representation =="Height Limit Exceeded":
		alignScopeToAxes(y)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Wall_Height_Limit_Exceeded(floornum, totalfloors, geometry.area(),Location)
		Texture_Surfaces(floornum,totalfloors,Location)
	case Scenario_Representation =="HAZUS Damage":
		#print (scope.elevation)
		alignScopeToAxes(y)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Wall_Surface_Flooded(floornum, totalfloors, geometry.area(),Location)
		Texture_Surfaces(floornum,totalfloors,Location)
	case Scenario_Representation == "Usage":
		# Usage coloring is handled later due to horizontal floor split logic.
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Usage_Color(floornum,totalfloors)
		Texture_Surfaces(floornum,totalfloors,Location)
	case Scenario_Representation =="Building Type":
		color(_Build_Type_Color)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Texture_Surfaces(floornum,totalfloors,Location)
		X.
	case Scenario_Representation =="Textured":
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Texture_Surfaces(floornum,totalfloors,Location)
	case Scenario_Representation =="Colored":
		#texture("default:uv")
		color(_Building_Color(Location))
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Texture_Surfaces(floornum,totalfloors,Location)
		X.	
	case Scenario_Representation =="Peak Runoff/Permeability":	
		color(Light_Gray)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Texture_Surfaces(floornum,totalfloors,Location)
		X.
	else:
		# Error.
		print("Error. Display_Type not found: " + Scenario_Representation )
		color(ElseCol)
		[case _isWall(Location):report("Zoning.Total Exterior Wall Area (M^2)", geometry.area()) else: NIL]
		Texture_Surfaces(floornum,totalfloors,Location) 
		X.	
Usage_Color(floornum,totalfloors)-->
	color( _Usage_Color (floornum,totalfloors))
	
Wall_Surface_Flooded(floornum, totalfloors, areaOfWall, Location)-->
	case FootPrint_Elevation<Base_Flood_Elevation:
		split(y) {(Base_Flood_Elevation-scope.elevation):Flooded_Wall(floornum, totalfloors, areaOfWall,Location)
				  |~1:Not_Flood_Wall(floornum, totalfloors, areaOfWall,Location)}
	else:
		Not_Flood_Wall(floornum, totalfloors, areaOfWall,Location)

Wall_Height_Limit_Exceeded(floornum,totalfloors,areaOfWall,Location)-->
	case _Height_Limit_Exceedance!=0:
		split(y){(Grade_Elevation+Height_Limit)-scope.elevation: X.
		|~1:color(DarkRed) X.}
	else:
		X.
	

Texture_Surfaces(floornum,totalfloors,Location)-->
	case Texturing_On :
		case Location=="Window":
			X.
		case Location=="Door":
			setupProjection(0,scope.xy,~Door_Texture_Scale,~Door_Texture_Scale)
			texture(_Generate_File_Path(WallTextures_Folder,Door_Texture,".jpg"))
			projectUV(0)
		
		case Location=="Roof":
			Texture_Roof(floornum,totalfloors,Location)
		case Location=="Frame Top" || Location=="Frame Side":
			setupProjection(0,scope.xy,~Frame_Texture_Scale,~Wall_Texture_Scale)
			texture(_Generate_File_Path(WallTextures_Folder,Frame_Texture,".jpg"))
			projectUV(0)
		else:
			setupProjection(0,scope.xy,~Wall_Texture_Scale,~Wall_Texture_Scale)
			texture(_Generate_File_Path(WallTextures_Folder,Wall_Texture,".jpg"))
			projectUV(0)
	else:
		NIL
Texture_Roof(floornum,totalfloors,Location)-->
	case Roof_Type=="Flat":
		setupProjection(0,scope.xz,~Flat_Roof_Texture_Scale,~Flat_Roof_Texture_Scale,~Flat_Roof_Texture_Scale,~Flat_Roof_Texture_Scale,1)
		texture(_Generate_File_Path(FlatRoof_Folder,Flat_Roof_Texture,".jpg"))
		projectUV(0)
	else:
		setupProjection(0,scope.xz,~Sloped_Roof_Texture_Scale,~Sloped_Roof_Texture_Scale)
		texture(_Generate_File_Path(SlopedRoof_Folder,Sloped_Roof_Texture,".jpg"))
		projectUV(0)

Flooded_Wall(floornum, totalfloors, areaOfWall, Location)-->
	case LOD_Setting=="High":
		alignScopeToAxes(y)
		#setupProjection(0,scope.xy, ~2, ~2)
		#projectUV(0)
		#set(material.name, "watermaterial__waterparams_10_15")	
		color(Dark_Blue)
		[case _isWall(Location):report("Walls.Inundated Exterior Wall Area (M^2)",geometry.area())else: NIL]
		X.
	else:
		alignScopeToAxes(y)
		color(Dark_Blue)
		[case _isWall(Location):report("Walls.Inundated Exterior Wall Area (M^2)",geometry.area())else: NIL]
		X.
Not_Flood_Wall(floornum, totalfloors, areaOfWall,Location)-->
	color(_NonFloodWallColor)
	[case _isWall(Location):report("Walls.Dry Exterior Wall Area (M^2)",geometry.area())else: NIL]
	X.
	
Deployable_Flood_Bar(Location)-->
	case _DesignFloodHeight<=0: #No flood barriers if Design Flood height is less than 0
		NIL
	case Deployable_Flood_Barriers=="None":
		NIL
	case Deployable_Flood_Barriers=="Building" && Location=="Foot Print":
		offset(.35+_DesignFloodHeight*.1)
		comp(f) {border:Wall_Deployment(Location)}
	else:
		NIL
		print("Error or other trigger in deployable flood barrier rule")

Wall_Deployment(Location)-->
	reverseNormals
	report("Adaptive Measures.Deployable Flood Barrier Height",(_DesignFloodHeight))
	extrude(_DesignFloodHeight)
	color(.6,.6,.6)
	
#Raise Assets
Piling(Location,Extrusion_Adjuster)-->
	case geometry.nEdges!=4 || !geometry.isRectangular(20):
		Cement("No Piling",Light_Gray)
	else:
		report("Adaptive Measures.Piling Volume (M^3)",geometry.area*Elevation_Height)
		extrude(Elevation_Height-Extrusion_Adjuster)
		Cement("Pilings",Light_Gray)
	
Cement(Location,Color)-->
	case Texturing_On:
		color(Color)
		setupProjection(0, scope.xy, 2, 2)
		texture(WallTextures_Folder+"/wall_concrete_4.jpg")
		projectUV(0)
	else:
		color(Color)
	
Critical_System-->
	label("Critical System")
	color(.5,.1,.1)
	[case scope.elevation<=(_DesignFloodHeight-.01):report("Critical Systems.Below DFE (BFE+FBR)",1)
	else: report("Critical Systems.Above DFE (BFE+FBR)",1)]#-.01 to deal with floating point issues

Green_Space_Start -->
	innerRectangle(scope){shape: Green_Space_Allocation |remainder: Green_Space_Allocation }
	
Green_Space_Allocation -->
	case geometry.area()>=Tree_Area_Requirement && GS_Has_Tree:
		setback(Planting_Setback) {all:Grass|remainder: Tree_Scatter}
	else:
		Grass

Tree_Scatter-->
	scatter(surface,Planting_Count,uniform) { Tree_Setup("Main Space", Greenspace_Tree_1_Percentage , Greenspace_Tree_1_Type , Greenspace_Tree_2_Type ) }
	Grass
	
Grass -->
	case Texturing_On :
		setupProjection(0, scope.xz,3,3) projectUV(0)
		texture(_Generate_File_Path(Grass_Folder,"Lawn 1",".jpg"))
		deleteUV(_Texture_Switch)
		Pervious_Reporting	
	else:
		color(NACTOPlanting)
		Pervious_Reporting

Pervious_Reporting-->
	case peakRunoffDisplayOn:
		report("Vegetation.Pervious Area",geometry.area)
		color(0,0,1)
		X.
	else:
		report("Vegetation.Pervious Area",geometry.area)

	
Tree_Setup(Location,Percentage1,Tree_Type1,Tree_Type2)-->	                     				
		s(0,0,0)       // set scope
		r(scopeCenter, 0,rand(0,360),0)// random rotate
		alignScopeToAxes(y)
		center(xz)        					
		TreeInsert(Location,Percentage1,Tree_Type1,Tree_Type2)

TreeInsert(Location,Percentage1,Tree_Type1,Tree_Type2) -->
	case Texturing_On :
		case p(Percentage1): 
			s(0,0,0)
			report("Vegetation.Construction, Tree Cost",TreeCostAverage)
			set(Tree.Name, Tree_Type_Adjusted(Tree_Type1))
			#set(Tree.Height, _Tree_Height(Tree_Type1))
			#set(Tree.Radius,_Tree_Radius(Tree_Type1))
			Tree.Generate
		case Tree_Type2!="None":
			s(0,0,0)
			report("Vegetation.Construction, Tree Cost", TreeCostAverage)
			set(Tree.Name, Tree_Type_Adjusted(Tree_Type2))
			#set(Tree.Height, _Tree_Height(Tree_Type2))
			#set(Tree.Radius,_Tree_Radius(Tree_Type2))
			Tree.Generate
		else:
			NIL
	else: #If Texturing is off, the tree texture is overrided to the current thematic color 
		case p(Percentage1):
			s(0,0,0)
			report("Vegetation.Construction, Tree Cost",TreeCostAverage)
			set(Tree.Name, Tree_Type_Adjusted(Tree_Type1))
			set(Tree.OverwriteColor,TreeCol)
			Tree.Generate
		case Tree_Type2!="None": #So if the percentage if 50%, and Tree1 does not fire, if tree 2 is not set to None, that tree 2 will be selected.
			s(0,0,0)
			report("Vegetation.Construction, Tree Cost", TreeCostAverage)
			set(Tree.Name, Tree_Type_Adjusted(Tree_Type2))
			set(Tree.OverwriteColor, TreeCol)
			Tree.Generate
		else:
			NIL	
	
Tree_Type_Adjusted(Tree_Type) = 
	case Tree_Type == "Random": randomTreeType
	else: Tree_Type

randomTreeType = 
	20%: 	 "Tree of Heaven"
	20%:	 "White Ash"
	20%:	 "Common Hackberry"
	20%:	 "Sweetgum"
	else:	 "Sassafras"

Red-->
	color(1,0,0)
#LotInner Start Rule
LotInner-->
	Green_Space_Start	

#Old Code:
#report("Adaptive Measures.Deployable Flood Barrier Volume",geometry.area*(_DesignFloodHeight))
#[case _isWall(Location):report("Walls.Dry Exterior Wall Area (M^2)",geometry.area()) else: NIL]
#[case scope.elevation<=(Base_Flood_Elevation):report("Critical Systems.Below Base Flood Height (BFE)",1)
	#else: report("Critical Systems.Below Base Flood Height (BFE)",0)]